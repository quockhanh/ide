namespace {{{rootNamespace}}}.Support;

public abstract class BasePageTest
{
    public IPage Page { get; private set; }

    public BasePageTest(IPage page)
    {
        Page = page;
    }

    protected async Task ClickOpenPopupAsync(Func<Task> triggerFn)
    {
        IPage popup = await this.Page.RunAndWaitForPopupAsync(triggerFn);
        await popup.WaitForLoadStateAsync();
    }

    public async Task ClosePopupAsync()
    {
        await this.Page.CloseAsync();
    }

    public async Task SwitchTabAsync(int tabIndex)
    {
        IPage? targetPage = Page.Context.Pages.ElementAtOrDefault(tabIndex);
        if (targetPage != null)
        {
            this.Page = targetPage;
            return;
        }

        await Task.CompletedTask;

        throw new ArgumentException($"Cannot switch to tab with index '{tabIndex}'");
    }

    public async Task SwitchTabAsync(string tabIdentifier)
    {
        foreach (IPage page in Page.Context.Pages)
        {
            string title = await page.TitleAsync();

            bool normalMatched = title.Contains(tabIdentifier);
            if (normalMatched)
            {
                this.Page = page;
                return;
            }

            var regex = new System.Text.RegularExpressions.Regex(tabIdentifier, System.Text.RegularExpressions.RegexOptions.IgnoreCase);
            bool regexMatched = regex.Match(title).Success;
            if (regexMatched)
            {
                this.Page = page;
                return;
            }
        }

        throw new ArgumentException($"Cannot switch to tab with identifier '{tabIdentifier}'");

    }


    /// <summary>
    /// Custom Expect method that works from IFrameLocator
    /// </summary>
    protected ILocatorAssertions Expect(IFrameLocator frameLocator)
    {
        return Assertions.Expect(frameLocator.Locator(":root"));
    }

    /// <summary>
    /// Custom Expect method that works from ILocator
    /// </summary>
    protected ILocatorAssertions Expect(ILocator locator)
    {
        return Assertions.Expect(locator);
    }

    /// <summary>
    /// Custom Expect method that works from IPage
    /// </summary>
    protected IPageAssertions Expect(IPage page)
    {
        return Assertions.Expect(page);
    }
}