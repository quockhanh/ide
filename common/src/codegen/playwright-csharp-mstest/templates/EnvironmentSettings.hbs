namespace {{{rootNamespace}}}.Config;

{{!-- Use parital class for easy copy in and out of the template --}}

{{!-- This partial should contain code with hbs parameters --}}
/// <summary>
/// Environment settings: Contains getters for Environment variables
/// </summary>
internal static partial class EnvironmentSettings
{    
    {{#each allVariableNames as |name|}}
    {{#if (isnt name "TakeScreenshotOnError")}}
    {{#if (isnt name "RecordVideoMode")}}
    public static readonly string {{{name}}} = Environment.GetEnvironmentVariable(nameof({{{name}}})) ?? string.Empty;
    {{/if}}
    {{/if}}
    {{/each}}
}

{{!-- This partial should contain code that is static (no hbs parameters). i.e the whole class can be copy without changing --}}
internal static partial class EnvironmentSettings
{
    public static readonly bool TakeScreenshotOnError = (Environment.GetEnvironmentVariable(nameof(TakeScreenshotOnError), EnvironmentVariableTarget.Process) ?? "true") == "true";
    public static readonly RecordVideoMode RecordVideoMode = Enum.TryParse<RecordVideoMode>(Environment.GetEnvironmentVariable(nameof(RecordVideoMode), EnvironmentVariableTarget.Process) ?? "RetainOnFailure", out var res) ? res : RecordVideoMode.RetainOnFailure;
}

/// <summary>
/// Playwright Recording Video Mode
/// </summary>
internal enum RecordVideoMode
{
    On,
    Off,
    RetainOnFailure
}