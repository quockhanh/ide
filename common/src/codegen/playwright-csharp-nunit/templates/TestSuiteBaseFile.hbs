namespace {{{rootNamespace}}}.Support;

[TestFixture]
public abstract partial class TestSuiteBase : PageTest
{
    [SetUp]
    public new async Task PageSetup()
    {        
        {{#if testIdAttributeName}}
        Playwright.Selectors.SetTestIdAttribute("{{testIdAttributeName}}");
        {{/if}}
        await base.PageSetup();
    }
}


[TestFixture]
public abstract partial class TestSuiteBase : PageTest
{
    /// <summary>
    /// Default Playwright video extension
    /// </summary>
    const string VideoExtension = ".webm";

    /// <summary>
    /// Videos folder (in the build output folder)
    /// </summary>
    const string VideoDir = "videos";
    /// <summary>
    /// Folder to store the videos we want to keep
    /// </summary>
    readonly string KeepVideoDir = Path.Combine(VideoDir, "keep");
    /// <summary>
    /// Screenshots folder (in the build output folder)
    /// </summary>
    const string ScreenshotDir = "screenshots";

    public override BrowserNewContextOptions ContextOptions() => new()
    {
        // If RecordVideoMode is Off, then don't record videos
        RecordVideoDir = EnvironmentSettings.RecordVideoMode == RecordVideoMode.Off ? null : VideoDir
    };

    [TearDown]
    public void Cleanup()
    {
        SaveScreenshots();
        Context.CloseAsync().Wait();
        SaveRecordings().Wait();
    }

    /// <summary>
    /// Deletes existing recordings that were generated by previous tests (if any)
    /// </summary>
    private void DeleteExistingVideos()
    {
        if (!Directory.Exists(VideoDir))
        {
            return;
        }

        if (EnvironmentSettings.RecordVideoMode == RecordVideoMode.Off)
        {
            return;
        }

        foreach (string file in Directory.EnumerateFiles(VideoDir, "*.webm"))
        {
            File.Delete(file);
        }
    }

    /// <summary>
    /// Deletes existing screenshots that were generated by previous tests (if any)
    /// </summary>
    private void DeleteExistingScreenshots()
    {
        if (!Directory.Exists(ScreenshotDir))
        {
            return;
        }

        if (!EnvironmentSettings.TakeScreenshotOnError)
        {
            return;
        }

        foreach (string file in Directory.EnumerateFiles(ScreenshotDir, "*.png", SearchOption.AllDirectories))
        {
            File.Delete(file);
        }
    }

    private string GetRecordingFileName()
    {
        if (IsTestSuccess())
        {
            return $"{GetBaseTestName()}{VideoExtension}";
        }

        return $"{GetBaseTestName()}_error{VideoExtension}";
    }

    private bool ShouldSaveRecordings()
    {
        if (EnvironmentSettings.RecordVideoMode == RecordVideoMode.Off)
        {
            return false;
        }

        if (EnvironmentSettings.RecordVideoMode == RecordVideoMode.RetainOnFailure)
        {
            if (IsTestSuccess())
            {
                return false;
            }
        }

        if (EnvironmentSettings.RecordVideoMode == RecordVideoMode.On)
        {
            // Proceed
        }
        return true;
    }

    private void CreateScreenshotDir()
    {

        if (!Directory.Exists(ScreenshotDir))
        {
            Directory.CreateDirectory(ScreenshotDir);
        }
    }

    private void CreateKeepVideoDir()
    {

        if (!Directory.Exists(KeepVideoDir))
        {
            Directory.CreateDirectory(KeepVideoDir);
        }
    }

    private async Task SaveRecordings()
    {
        if (!ShouldSaveRecordings())
        {
            return;
        }

        CreateKeepVideoDir();

        string autoNameVideo = await Page.Video!.PathAsync();

        string videoFileName = GetRecordingFileName();

        string moveToFileName = Path.Combine(KeepVideoDir, videoFileName);

        if (File.Exists(moveToFileName))
        {
            File.Delete(moveToFileName);
        }


        File.Move(autoNameVideo, moveToFileName);
    }

    private void SaveScreenshots()
    {
        if (TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Success)
        {
            return;
        }

        if (!EnvironmentSettings.TakeScreenshotOnError)
        {
            return;
        }

        if (!EnvironmentSettings.TakeScreenshotOnError)
        {
            return;
        }

        string screenshotFile = Path.Combine(ScreenshotDir, $"{GetBaseTestName()}_error.png");

        if (File.Exists(screenshotFile))
        {
            File.Delete(screenshotFile);
        }

        this.Page.ScreenshotAsync(new PageScreenshotOptions { Path = screenshotFile, FullPage = true }).Wait();
    }

    private string GetBaseTestName()
    {
        return $"{TestContext.CurrentContext.Test.ClassName}_{TestContext.CurrentContext.Test.Name}";
    }

    private bool IsTestSuccess()
    {
        return TestContext.CurrentContext.Result.Outcome == NUnit.Framework.Interfaces.ResultState.Success;
    }
}