using System.Xml.Serialization;

namespace {{{rootNamespace}}}.Support;

/// <summary>
/// Base class that provide basic playwright Expect() method
/// </summary>
public abstract class Expectator
{
    public ILocatorAssertions Expect(ILocator locator)
    {
        return Assertions.Expect(locator);
    }

    public IPageAssertions Expect(IPage page)
    {
        return Assertions.Expect(page);
    }

    public IAPIResponseAssertions Expect(IAPIResponse response)
    {
        return Assertions.Expect(response);
    }
}

/// <summary>
/// Implement our PageTest for XUnit 
/// </summary>
public abstract class PageTest : Expectator
{
    protected IPlaywright Playwright {get; }
    private IBrowser Browser {get;}
    public IPage Page { get; }

    protected PageTest? TestSuiteInstance;

    BrowserTypeLaunchOptions LaunchOptions {get;}

    public PageTest()
    {
         RunSettings runSettings = LoadFromRunSettings();

        LaunchOptions = new BrowserTypeLaunchOptions
        {
            Headless = runSettings.Playwright.LaunchOptions.Headless
        };

        Playwright = Microsoft.Playwright.Playwright.CreateAsync().Result;
        Browser = Playwright.Chromium.LaunchAsync(LaunchOptions).Result;
        Page = Browser.NewPageAsync().Result;
    }

    public PageTest(PageTest testSuiteInstance)
    {
        LaunchOptions = testSuiteInstance.LaunchOptions;
        Playwright = testSuiteInstance.Playwright;
        TestSuiteInstance = testSuiteInstance;
        Page = TestSuiteInstance.Page;
        Browser = TestSuiteInstance.Browser;
    }

    public async Task Dispose()
    {
        await Page.CloseAsync();
        await Browser.DisposeAsync();
        Playwright.Dispose();
    }

    private IBrowserType GetBrowser(string browserName)
    {
        switch (browserName)
        {
            case "chromium": return Playwright.Chromium;
            case "firefox": return Playwright.Firefox;
            case "webkit": return Playwright.Webkit;
        }
        return Playwright.Chromium;
    }

    private RunSettings LoadFromRunSettings()
    {
        string runSettingsRaw = File.ReadAllText(".runsettings");
        XmlSerializer serializer = new XmlSerializer(typeof(RunSettings));
        using (StringReader reader = new StringReader(runSettingsRaw))
        {
            RunSettings? runSettings = (serializer.Deserialize(reader)) as RunSettings;
            if (runSettings is null)
            {
                return new RunSettings();
            }

            return runSettings;
        }
    }
}

/// <summary>
/// Run Settings. Used for generating .runsettings file
/// </summary>
public class RunSettings
{
    public PlaywrightSetting Playwright { get; set; } = new PlaywrightSetting();
}

/// <summary>
/// Playwright Setting tag in the .runsettings file
/// </summary>
public class PlaywrightSetting
{
    public string BrowserName { get; set; } = "";
    public int ExpectTimeout { get; set; } = 10_000;

    public PlaywrightLaunchOptionsSetting LaunchOptions { get; set; } = new PlaywrightLaunchOptionsSetting();
}

/// <summary>
/// PlaywrightLaunchOptions Setting tag in the .runsettings file
/// </summary>
public class PlaywrightLaunchOptionsSetting
{
    public bool Headless { get; set; }
}
