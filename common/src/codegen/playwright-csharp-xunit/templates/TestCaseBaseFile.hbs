namespace {{{rootNamespace}}}.Support;

/// <summary>
/// Base class for test case
/// </summary>
public abstract class TestCaseBase : PageTest
{
    /// <summary>
    /// Returns TestSuiteInstance.Page when TestSuiteInstance is not null, otherwise return the Page of base class (PageTest.Page)
    /// </summary>
    public new IPage Page => TestSuiteInstance == null ? base.Page : TestSuiteInstance.Page;

    /// <summary>
    /// Default constructor
    /// </summary>
    public TestCaseBase() { }

    /// <summary>
    /// Create new instance of RmTestSuiteBase with the provided testSuiteInstance
    /// </summary>
    public TestCaseBase(PageTest testSuiteInstance) : base(testSuiteInstance)
    {
    }
}

/// <summary>
/// Base class for RM test routine 
/// </summary>
public abstract class TestRoutineBase: Expectator
{
    protected IPage Page { get; init; }

    /// <summary>
    /// Create new instance of RmTestSuiteBase with the provided Page
    /// </summary>
    public TestRoutineBase(IPage page)
    {
        this.Page = page;
    }
}