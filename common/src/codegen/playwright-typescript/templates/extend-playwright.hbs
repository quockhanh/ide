import path from "path";
import { BrowserContext, Page, TestInfo, test as base } from "@playwright/test";
import EnvironmentSettings from "~/config/EnvironmentSettings";

let browserContext: BrowserContext;

export const test = base.extend<{ page: Page; context: BrowserContext }>({
  page: async ({ page, context }, use) => {
    browserContext = context;
    await use(page);
  },
});

const saveScreenshots = async (page: Page, testInfo: TestInfo) => {
  if (!EnvironmentSettings.TakeScreenshotOnError) {
    return;
  }

  if (testInfo.status === "passed") {
    return;
  }

  let [suiteFileName, testCaseName] = testInfo.titlePath;
  suiteFileName = suiteFileName
    // Remove .spec.ts from suite file name
    .replace(/\.spec\.ts$/i, "")
    // Replace path sep with _
    .replace(path.sep, "_");

  const screenshotFileName = `${suiteFileName}_${testCaseName}_error.png`;

  const playwrightReportDir = path.resolve("./test-results");
  const saveScreenshotTo = path.join(playwrightReportDir, screenshotFileName);

  await page.screenshot({ path: saveScreenshotTo, fullPage: true });
};

const saveVideos = async (page: Page, testInfo: TestInfo) => {
  if (EnvironmentSettings.RecordVideoMode === "off") {
    return;
  }

  if (EnvironmentSettings.RecordVideoMode === "retain-on-failure") {
    if (testInfo.status === "passed") {
      return;
    }
  }

  if (EnvironmentSettings.RecordVideoMode === "on") {
    // Proceed
  }

  let [suiteFileName, testCaseName] = testInfo.titlePath;
  suiteFileName = suiteFileName
    // Remove .spec.ts from suite file name
    .replace(/\.spec\.ts$/i, "")
    // Replace path sep with _
    .replace(path.sep, "_");
  const errorIndicator = testInfo.status === "passed" ? "" : "_error";
  const playwrightReportDir = path.resolve("./test-results");
  const videoFileName = `${suiteFileName}_${testCaseName}${errorIndicator}.webm`;
  const saveVideoTo = path.join(playwrightReportDir, videoFileName);
  const pageVideo = page.video();

  try {
    await browserContext.close();
    const videoFile = await pageVideo.saveAs(saveVideoTo);
  } catch (err) {
    console.error(err);
  }
};

test.afterEach(async ({ page }, testInfo) => {
  await saveScreenshots(page, testInfo);
  await saveVideos(page, testInfo);
});

export { expect } from "@playwright/test";
