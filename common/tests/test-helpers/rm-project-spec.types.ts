import { IRmProj, LocatorType } from "../../src/file-defs";

// These interfaces in this file are only used for unit tests

/**
 * This acts as blueprint to generate an RMProject source files
 */
export interface RmpSpec {
  projectName: string;
  content: IRmProj;
  pages: IPage[];
  testcases: ITestCase[];
  testsuites: ITestSuite[];
  testroutines: ITestRoutine[];
  outputFiles: OutputCodeFile[];
  configFiles: IConfig[];
}

export interface IElement {
  /** Should be empty string */
  id: string;
  name?: string;
  type: "pageElement" | "comment";
  findBy?: LocatorType;
  locator?: string;
  description?: string;
  comment?: string;
}

export interface OutputCodeFile {
  fileRelPath: string;
  fileContent: string;
}

export interface IPage {
  /** This id is auto generated by the test */
  id: string;
  name?: string;
  description?: string;
  elements: IElement[];
}

export interface ITestCase {
  /** This id is auto generated by the test */
  id: string;
  name?: string;
  description: string;
  steps: (IActionInTestCase | IComment)[];
}

export interface IComment {
  id: string;
  type: "comment";
  comment?: string;
}

export interface ITestRoutine {
  /** This id is auto generated by the test */
  id: string;
  name?: string;
  description: string;
  steps: (IActionInRoutine | IComment)[];
  dataSets: { id: string; name: string; description: string }[];
}

export interface IActionBase {
  id: string;
  type: "testStep";
  page?: string;
  element?: string;
  action?: string;
  parameters?: string[];
  data: string;
}

export interface IActionInTestCase extends Omit<IActionBase, "data"> {
  data: string;
}

export interface IActionInRoutine extends Omit<IActionBase, "data"> {
  data: { [datasetId: string]: string };
}
export interface ITestSuite {
  /** This id is auto generated by the test */
  id: string;
  name?: string;
  description: string;

  /** Guid refers to the test case guid */
  testcases: string[];
}
export interface IConfig {
  /** File name without extension */
  name: string;
  settings: { name: string; value: string }[];
}
