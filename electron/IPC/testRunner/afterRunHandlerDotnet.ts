import path from "path";
import fs from "fs/promises";
import "ts-replace-all";

import { StandardFolder, TestFramework } from "rockmelonqa.common/file-defs";
import { IRunTestContext } from "rockmelonqa.common/ipc-defs";
import * as fileSystem from "../../utils/fileSystem";
import { StringBuilder } from "../../utils/stringBuilder";
import { EOL } from "os";
import { IAfterRunHandler } from "./afterRunHandler";

/** AfterRunHandler for Dotnet project */
export default class AfterRunHandlerDotnet implements IAfterRunHandler {
  /** Performs additional operations after dotnet test is finished */
  async handle(context: IRunTestContext, logBuilder: StringBuilder) {
    if (context.rmProjFile.content.testFramework === TestFramework.xUnit) {
      logBuilder.appendLine("(Could not take screenshot for failed test in Xunit test project)");
      return;
    }

    await this.processScreenshots(context, logBuilder);
    await this.processRecordings(context, logBuilder);
    await this.cleanupRedundantRecordings(context);
  }

  async processScreenshots(context: IRunTestContext, logBuilder: StringBuilder) {
    const failedTestScreenshots = await this.getFailedTestScreenshots(context);
    if (failedTestScreenshots.length) {
      logBuilder.appendLine("");
      logBuilder.appendLine("*** Failed test screenshot files ***");
      logBuilder.appendLine(failedTestScreenshots.map((f) => `- ${f}`).join(EOL));

      await this.moveErrorScreenshotsToTestRuns(context, failedTestScreenshots);
    }
  }

  async processRecordings(context: IRunTestContext, logBuilder: StringBuilder) {
    const recordings = await this.getRecordings(context);
    if (recordings.length) {
      logBuilder.appendLine("");
      logBuilder.appendLine("*** Failed test recording files ***");
      logBuilder.appendLine(recordings.map((f) => `- ${f}`).join(EOL));

      await this.moveRecordingsToTestRuns(context, recordings);
    }
  }
  async getRecordings(context: IRunTestContext) {
    const dotnetOutputVideoFolder = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      "bin",
      "Debug",
      "videos",
      "keep"
    );
    const files = await fs.readdir(dotnetOutputVideoFolder);
    const recordings = files.filter((f) => f.toLowerCase().endsWith(".webm"));
    return recordings;
  }

  async cleanupRedundantRecordings(context: IRunTestContext) {
    const dotnetOutputVideoFolder = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      "bin",
      "Debug",
      "videos"
    );
    const files = await fs.readdir(dotnetOutputVideoFolder);
    const recordings = files.filter((f) => f.toLowerCase().endsWith(".webm"));
    for (let recording of recordings) {
      await fs.unlink(path.join(dotnetOutputVideoFolder, recording));
    }
  }

  /** Gets the list of names of the failed test screenshots */
  async getFailedTestScreenshots(context: IRunTestContext): Promise<string[]> {
    const dotnetOutputFolder = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      "bin",
      "Debug",
      "screenshots"
    );

    // Folder only exists when there is at least 1 error screenshot
    if (!(await fileSystem.checkExists(dotnetOutputFolder))) {
      return [];
    }

    const files = await fs.readdir(dotnetOutputFolder);
    const errorScreenshotFiles = files.filter((f) => f.toLowerCase().endsWith("_error.png"));
    return errorScreenshotFiles;
  }

  /** Moves error screenshot that are generated by the run to the `test-runs/screnshots` folder */
  private async moveErrorScreenshotsToTestRuns(context: IRunTestContext, failedTestScreenshots: string[]) {
    const dotnetOutputFolder = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      "bin",
      "Debug",
      "screenshots"
    );

    // Folder only exists when there is at least 1 error screenshot
    if (!(await fileSystem.checkExists(dotnetOutputFolder))) {
      return;
    }

    let errorScreenShotsFolder = path.join(
      context.rmProjFile.folderPath,
      context.settings.testResultFolderRelPath,
      "error-screenshots"
    );
    fs.mkdir(errorScreenShotsFolder);

    for (let file of failedTestScreenshots) {
      let filePath = path.join(dotnetOutputFolder, file);
      let moveToPath = path.join(errorScreenShotsFolder, file);
      await fs.copyFile(filePath, moveToPath);
      await fs.unlink(filePath);
    }
  }

  /** Moves recordings that are generated by the run to the `test-runs/recordings` folder */
  private async moveRecordingsToTestRuns(context: IRunTestContext, failedTestScreenshots: string[]) {
    const dotnetOutputFolder = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      "bin",
      "Debug",
      "videos",
      "keep"
    );
    let recordingFolder = path.join(
      context.rmProjFile.folderPath,
      context.settings.testResultFolderRelPath,
      "recordings"
    );
    fs.mkdir(recordingFolder);

    for (let file of failedTestScreenshots) {
      let filePath = path.join(dotnetOutputFolder, file);
      let moveToPath = path.join(recordingFolder, file);
      await fs.copyFile(filePath, moveToPath);
      await fs.unlink(filePath);
    }
  }
}
