import path from "path";
import fs from "fs/promises";
import "ts-replace-all";

import { Language } from "rockmelonqa.common";
import { StandardFolder, StandardOutputFolderTypeScript, TestFramework } from "rockmelonqa.common/file-defs";
import { IRunTestContext } from "rockmelonqa.common/ipc-defs";
import * as fileSystem from "../../utils/fileSystem";
import { StringBuilder } from "../../utils/stringBuilder";
import { EOL } from "os";
import { IAfterRunHandler } from "./afterRunHandler";

/** AfterRunHandler for Playwright Typescript project */
export default class AfterRunHandlerTypeScript implements IAfterRunHandler {
  async handle(context: IRunTestContext, logBuilder: StringBuilder) {
    const failedTestScreenshots = await this.getFailedTestScreenshots(context);
    if (failedTestScreenshots.length) {
      logBuilder.appendLine("");
      logBuilder.appendLine("*** Failed test screenshot files ***");
      logBuilder.appendLine(failedTestScreenshots.map((f) => `- ${f}`).join(EOL));

      await this.copyErrorScreenshotsToTestRuns(context, failedTestScreenshots);
    }

    await this.copyPlaywrightReportToTestRuns(context);
  }

  private async getFailedTestScreenshots(context: IRunTestContext) {
    const testResultFolder = path.join(context.rmProjFile.folderPath, StandardFolder.OutputCode, "test-results");
    const files = await fs.readdir(testResultFolder);
    const errorScreenshotFiles = files.filter((f) => f.toLowerCase().endsWith("_error.png"));
    return errorScreenshotFiles;
  }

  /** Copies error screenshot that are generated by the run to the `test-runs` folder */
  private async copyErrorScreenshotsToTestRuns(context: IRunTestContext, failedTestScreenshots: string[]) {
    const testResultFolder = path.join(context.rmProjFile.folderPath, StandardFolder.OutputCode, "test-results");
    let errorScreenShotsFolder = path.join(
      context.rmProjFile.folderPath,
      context.settings.testResultFolderRelPath,
      "error-screenshots"
    );
    fs.mkdir(errorScreenShotsFolder);

    for (let file of failedTestScreenshots) {
      let filePath = path.join(testResultFolder, file);
      let copyToPath = path.join(errorScreenShotsFolder, file);
      await fs.copyFile(filePath, copyToPath);
      await fs.unlink(filePath);
    }
  }

  /** Copy playwright report (html) file to test-runs folder */
  private async copyPlaywrightReportToTestRuns(context: IRunTestContext) {
    const playwrightReportFile = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      StandardOutputFolderTypeScript.PlaywrightReport,
      "index.html"
    );
    // Copy test result file to "test-runs" folder
    const runResultFilePath = path.join(
      context.rmProjFile.folderPath,
      context.settings.testResultFolderRelPath,
      `test-result.html`
    );
    await fileSystem.copyFile(playwrightReportFile, runResultFilePath);
  }
}
