import path from "path";
import fs from "fs/promises";
import "ts-replace-all";

import { Language } from "rockmelonqa.common";
import { StandardFolder, StandardOutputFolderTypeScript } from "rockmelonqa.common/file-defs";
import { IRunTestContext } from "rockmelonqa.common/ipc-defs";
import * as fileSystem from "../../../utils/fileSystem";

/** AfterRunHandler that performs additional operations after the test run finished */
interface IAfterRunHandler {
  /** Performs addtional operations */
  handle(context: IRunTestContext): Promise<void>;
  /** Gets the list of names of the failed test screenshots */
  getFailedTestScreenshots(context: IRunTestContext): Promise<string[]>;
}

/** Contains factory method to create instance of AfterRunHandler  */
export class AfterRunHandlerFactory {
  static getInstance(language: Language): IAfterRunHandler {
    if (language === Language.Typescript) {
      return new AfterRunHandlerTypeScript();
    }
    if (language === Language.CSharp) {
      return new AfterRunHandlerDotnet();
    }
    throw new Error(`DEV ERROR: cannot get instance of AfterRunHandler for language ${language}`);
  }
}

/** Base class for AfterRunHandler */
class AfterRunHandlerBase {}

/** AfterRunHandler for Dotnet project */
class AfterRunHandlerDotnet extends AfterRunHandlerBase implements IAfterRunHandler {
  async handle(context: IRunTestContext) {
    await this.copyErrorScreenshotsToTestRuns(context);
  }

  /** Gets the list of names of the failed test screenshots */
  async getFailedTestScreenshots(context: IRunTestContext) {
    const dotnetOutputFolder = path.join(context.rmProjFile.folderPath, StandardFolder.OutputCode, "bin", "Debug");
    const files = await fs.readdir(dotnetOutputFolder);
    const errorScreenshotFiles = files.filter((f) => f.toLowerCase().endsWith("_error.png"));
    return errorScreenshotFiles;
  }

  /** Copies error screenshot that are generated by the run to the `test-runs` folder */
  private async copyErrorScreenshotsToTestRuns(context: IRunTestContext) {
    const dotnetOutputFolder = path.join(context.rmProjFile.folderPath, StandardFolder.OutputCode, "bin", "Debug");
    const files = await fs.readdir(dotnetOutputFolder);
    const errorScreenshotFiles = files.filter((f) => f.toLowerCase().endsWith("_error.png"));
    if (errorScreenshotFiles.length) {
      let errorScreenShotsFolder = path.join(
        context.rmProjFile.folderPath,
        context.settings.testResultFolderRelPath,
        "error-screenshots"
      );
      fs.mkdir(errorScreenShotsFolder);

      for (let file of errorScreenshotFiles) {
        let filePath = path.join(dotnetOutputFolder, file);
        let copyToPath = path.join(errorScreenShotsFolder, file);
        await fs.copyFile(filePath, copyToPath);
        await fs.unlink(filePath);
      }
    }
  }
}

/** AfterRunHandler for Playwright Typescript project */
class AfterRunHandlerTypeScript extends AfterRunHandlerBase implements IAfterRunHandler {
  async handle(context: IRunTestContext) {
    await this.copyPlaywrightReportToTestRuns(context);
  }
  async getFailedTestScreenshots(context: IRunTestContext) {
    const files: string[] = [];
    return files;
  }

  /** Copy playwright report (html) file to test-runs folder */
  private async copyPlaywrightReportToTestRuns(context: IRunTestContext) {
    const playwrightReportFile = path.join(
      context.rmProjFile.folderPath,
      StandardFolder.OutputCode,
      StandardOutputFolderTypeScript.PlaywrightReport,
      "index.html"
    );
    // Copy test result file to "test-runs" folder
    const runResultFilePath = path.join(
      context.rmProjFile.folderPath,
      context.settings.testResultFolderRelPath,
      `test-result.html`
    );
    await fileSystem.copyFile(playwrightReportFile, runResultFilePath);
  }
}
