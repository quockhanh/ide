export const stringResKeys = {
    aboutDialog: {
        checkUpdateBtn: "aboutDialog.checkUpdateBtn",
        checkingForUpdateMsg: "aboutDialog.checkingForUpdateMsg",
        downloadingMsg: "aboutDialog.downloadingMsg",
        errorOnUpdateMsg: "aboutDialog.errorOnUpdateMsg",
        startDownloadUpdateMsg: "aboutDialog.startDownloadUpdateMsg",
        updateAvailableMsg: "aboutDialog.updateAvailableMsg",
        updateBtn: "aboutDialog.updateBtn",
        updateDownloadedMsg: "aboutDialog.updateDownloadedMsg",
        updateNotAvailableMsg: "aboutDialog.updateNotAvailableMsg",
        version: "aboutDialog.version",
    },
    application: {
        name: "application.name",
    },
    codeGenerationDialog: {
        buildMsg: "codeGenerationDialog.buildMsg",
        checkPrerequisites: "codeGenerationDialog.checkPrerequisites",
        cleanFolderMsg: "codeGenerationDialog.cleanFolderMsg",
        copyCustomCodeMsg: "codeGenerationDialog.copyCustomCodeMsg",
        dialogMsg: "codeGenerationDialog.dialogMsg",
        dialogTitle: "codeGenerationDialog.dialogTitle",
        duplicateFileNameMessage: "codeGenerationDialog.duplicateFileNameMessage",
        errorMsg: "codeGenerationDialog.errorMsg",
        finishedMsg: "codeGenerationDialog.finishedMsg",
        generateCodeMsg: "codeGenerationDialog.generateCodeMsg",
        installDependenciesMsg: "codeGenerationDialog.installDependenciesMsg",
        logFile: "codeGenerationDialog.logFile",
        parseDataMsg: "codeGenerationDialog.parseDataMsg",
        validateInputMsg: "codeGenerationDialog.validateInputMsg",
    },
    culture: {
        currencyCode: "culture.currencyCode",
        currencyDecimalPlaces: "culture.currencyDecimalPlaces",
        currencySymbol: "culture.currencySymbol",
        dateFormat: "culture.dateFormat",
        dateFormatDatePicker: "culture.dateFormatDatePicker",
        dateTimeFormat: "culture.dateTimeFormat",
        decimalPoint: "culture.decimalPoint",
        floatRegExp: "culture.floatRegExp",
        integerRegExp: "culture.integerRegExp",
        locale: "culture.locale",
        thousandsDelimeter: "culture.thousandsDelimeter",
        timeFormat: "culture.timeFormat",
    },
    deletePageWarningDialog: {
        dialogContent: "deletePageWarningDialog.dialogContent",
        dialogTitle: "deletePageWarningDialog.dialogTitle",
    },
    deleteTestCaseConfirmationDialog: {
        dialogContent: "deleteTestCaseConfirmationDialog.dialogContent",
        dialogTitle: "deleteTestCaseConfirmationDialog.dialogTitle",
    },
    deleteTestRoutineWarningDialog: {
        dialogContent: "deleteTestRoutineWarningDialog.dialogContent",
        dialogTitle: "deleteTestRoutineWarningDialog.dialogTitle",
    },
    environmentEditor: {
        actions: "environmentEditor.actions",
        deleteRowConfirmation: "environmentEditor.deleteRowConfirmation",
        invalidNameMessage: "environmentEditor.invalidNameMessage",
        name: "environmentEditor.name",
        value: "environmentEditor.value",
    },
    fileExplorer: {
        newEnvFile: "fileExplorer.newEnvFile",
        newFile: "fileExplorer.newFile",
        newFolder: "fileExplorer.newFolder",
        newPage: "fileExplorer.newPage",
        newTestCase: "fileExplorer.newTestCase",
        newTestRoutine: "fileExplorer.newTestRoutine",
        newTestSuite: "fileExplorer.newTestSuite",
    },
    form: {
        invalidDateError: "form.invalidDateError",
        invalidDateTimeError: "form.invalidDateTimeError",
        invalidFloatError: "form.invalidFloatError",
        invalidIntegerError: "form.invalidIntegerError",
        isRequiredError: "form.isRequiredError",
        maxDateError: "form.maxDateError",
        maxFloatError: "form.maxFloatError",
        maxIntegerError: "form.maxIntegerError",
        maxLengthError: "form.maxLengthError",
        minDateError: "form.minDateError",
        minFloatError: "form.minFloatError",
        minIntegerError: "form.minIntegerError",
        minLengthError: "form.minLengthError",
        noDropdownLabel: "form.noDropdownLabel",
        patternError: "form.patternError",
        yesDropdownLabel: "form.yesDropdownLabel",
    },
    general: {
        add: "general.add",
        and: "general.and",
        cancel: "general.cancel",
        close: "general.close",
        confirmation: "general.confirmation",
        create: "general.create",
        delete: "general.delete",
        dismiss: "general.dismiss",
        done: "general.done",
        edit: "general.edit",
        error: "general.error",
        exit: "general.exit",
        info: "general.info",
        moveDown: "general.moveDown",
        moveUp: "general.moveUp",
        next: "general.next",
        no: "general.no",
        none: "general.none",
        noRecordsFound: "general.noRecordsFound",
        ok: "general.ok",
        previous: "general.previous",
        save: "general.save",
        searching: "general.searching",
        showMore: "general.showMore",
        start: "general.start",
        success: "general.success",
        warning: "general.warning",
        yes: "general.yes",
    },
    pageDefinitionEditor: {
        actions: "pageDefinitionEditor.actions",
        addComment: "pageDefinitionEditor.addComment",
        addElement: "pageDefinitionEditor.addElement",
        comment: "pageDefinitionEditor.comment",
        deleteRowConfirmation: "pageDefinitionEditor.deleteRowConfirmation",
        description: "pageDefinitionEditor.description",
        elementName: "pageDefinitionEditor.elementName",
        elementNameInvalidMessage: "pageDefinitionEditor.elementNameInvalidMessage",
        findBy: "pageDefinitionEditor.findBy",
        locator: "pageDefinitionEditor.locator",
        name: "pageDefinitionEditor.name",
    },
    project: {
        automationFramework: "project.automationFramework",
        creatingNewProject: "project.creatingNewProject",
        description: "project.description",
        folder: "project.folder",
        indent: "project.indent",
        indentSize: "project.indentSize",
        language: "project.language",
        name: "project.name",
        nameRegexErrorMessage: "project.nameRegexErrorMessage",
        newProject: "project.newProject",
        openProject: "project.openProject",
        output: "project.output",
        rootNamespace: "project.rootNamespace",
        testFramework: "project.testFramework",
    },
    runTestDialog: {
        dialogTitle: "runTestDialog.dialogTitle",
        errorMsg: "runTestDialog.errorMsg",
        finishedMsg: "runTestDialog.finishedMsg",
        headless: "runTestDialog.headless",
        runningTestMsg: "runTestDialog.runningTestMsg",
        runTestBtn: "runTestDialog.runTestBtn",
        selectAllTests: "runTestDialog.selectAllTests",
        selectBrowser: "runTestDialog.selectBrowser",
        testAvailableMsg: "runTestDialog.testAvailableMsg",
        testNotAvailableMsg: "runTestDialog.testNotAvailableMsg",
        testOutput: "runTestDialog.testOutput",
    },
    testCaseEditor: {
        action: "testCaseEditor.action",
        actions: "testCaseEditor.actions",
        addComment: "testCaseEditor.addComment",
        addStep: "testCaseEditor.addStep",
        comment: "testCaseEditor.comment",
        data: "testCaseEditor.data",
        deleteRowConfirmation: "testCaseEditor.deleteRowConfirmation",
        description: "testCaseEditor.description",
        element: "testCaseEditor.element",
        name: "testCaseEditor.name",
        page: "testCaseEditor.page",
        routine: "testCaseEditor.routine",
    },
    testRoutineEditor: {
        actions: "testRoutineEditor.actions",
        action: "testRoutineEditor.action",
        addComment: "testRoutineEditor.addComment",
        comment: "testRoutineEditor.comment",
        dataSet: "testRoutineEditor.dataSet",
        deleteRowConfirmation: "testRoutineEditor.deleteRowConfirmation",
        description: "testRoutineEditor.description",
        element: "testRoutineEditor.element",
        name: "testRoutineEditor.name",
        page: "testRoutineEditor.page",
        routine: "testRoutineEditor.routine",
        steps: "testRoutineEditor.steps",
    },
    testSuiteEditor: {
        action: "testSuiteEditor.action",
        actions: "testSuiteEditor.actions",
        addTestCase: "testSuiteEditor.addTestCase",
        deleteRowConfirmation: "testSuiteEditor.deleteRowConfirmation",
        description: "testSuiteEditor.description",
        name: "testSuiteEditor.name",
        testCase: "testSuiteEditor.testCase",
    },
};
